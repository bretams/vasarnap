(ns vasarnap.core
  (:require
    [reagent.core :as reagent :refer [atom]]
    [reagent.dom :as rdom]
    [reagent.session :as session]
    [reitit.frontend :as reitit]
    [clerk.core :as clerk]
    [accountant.core :as accountant]))

;; -------------------------
;; Routes

(def router
  (reitit/router
    [["/" :index]
     ["/items"
      ["" :items]
      ["/:item-id" :item]]
     ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; Page components

(defn home-page []
  (fn []

    [:h1 "The Cursors of CSS"] [:div.cursors
                                [:div.auto "auto"]
                                [:div.default "default"]
                                [:div.none "none"]
                                [:div.context-menu "context-menu"]
                                [:div.help "help1"]
                                [:div.pointer "pointer"]
                                [:div.progress "progress"]
                                [:div.wait "wait"]
                                [:div.cell "cell"]
                                [:div.crosshair "crosshair"]
                                [:div.text "text"]
                                [:div.vertical-text "vertical-text"]
                                [:div.alias "alias"]
                                [:div.copy "copy"]
                                [:div.move "move"]
                                [:div.no-drop "no-drop"]
                                [:div.not-allowed "not-allowed"]
                                [:div.all-scroll "all-scroll"]
                                [:div.col-resize "col-resize"]
                                [:div.row-resize "row-resize"]
                                [:div.n-resize "n-resize"]
                                [:div.s-resize "s-resize"]
                                [:div.e-resize "e-resize"]
                                [:div.w-resize "w-resize"]
                                [:div.ns-resize "ns-resize"]
                                [:div.ew-resize "ew-resize"]
                                [:div.ne-resize "ne-resize"]
                                [:div.nw-resize "nw-resize"]
                                [:div.se-resize "se-resize"]
                                [:div.sw-resize "sw-resize"]
                                [:div.nesw-resize "nesw-resize"]
                                [:div.nwse-resize "nwse-resize"]]))
  (fn []

     [:div {:uk-alert "true"}
      [:button.uk-alert-close {:type "button" :uk-close "true"}]
      [:p "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt."]]
    )



;;________________________________________________________________________________________{:style "background-image: url(https://images2.alphacoders.com/556/556062.jpg);"}
;;(defn home-page []
;;(fn []

;;  [:div.uk-background-fixed.uk-background-center-center.uk-height-medium.uk-width-large {:style {:background-image "url(https://images2.alphacoders.com/556/556062.jpg)"}}
;;   [:span.main
;;    [:h1 "Welcome to vasarnap"]
;;    [:ul
;;     [:li [:a {:href (path-for :items)} "Items of vasarnap"]]
;;     [:li [:a {:href "/broken/link"} "Broken link"]]]]]))

(defn items-page []
  (fn []
    [:span.main
     [:h1 "The items of vasarnap"]
     [:ul (map (fn [item-id]
                 [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
                  [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
               (range 1 60))]]))


(defn item-page []
  (fn []
    (let [routing-data (session/get :route)
          item (get-in routing-data [:route-params :item-id])]
      [:span.main
       [:h1 (str "Item " item " of vasarnap")]
       [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About vasarnap"]]))


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :items #'items-page
    :item #'item-page))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div.uk-width-1-1                                    ;pelda div-re! uk-width-1-1
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About vasarnap"]]]
       [page]
       [:footer
        [:p "vasarnap was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]
       [:div.uk-width-1-1 {:uk-alert "true"}
         [:button.uk-alert-close {:uk-type "button" :uk-close "true"}]
         [:p "Close in alerts DONE"]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
    {:nav-handler
     (fn [path]
       (let [match (reitit/match-by-path router path)
             current-page (:name (:data match))
             route-params (:path-params match)]
         (reagent/after-render clerk/after-render!)
         (session/put! :route {:current-page (page-for current-page)
                               :route-params route-params})
         (clerk/navigate-page! path)
         ))
     :path-exists?
     (fn [path]
       (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
